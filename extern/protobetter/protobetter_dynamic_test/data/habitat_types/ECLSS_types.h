/* Created : Wed Aug 29 18:01:00 CDT 2018
   User    : rhirsh
   Project : habitat
   Script  : /gfe/TOOLS/cfs_tools/cfs_cdd/scripts/HabTypesHeaderExtended.js
   Table(s): ECLSS_PPA_tlm_packet_t, CCSDS_TLM_HDR, CCSDS_Primary, ECLSS_PPA_tlm_payload_t, HAB_ECLSS_ARS_TLM, HAB_ECLSS_ARS_SAM_TLM, HAB_ECLSS_ARS_CPM_TLM, HAB_ECLSS_ARS_TCCS_TLM, HAB_ECLSS_ARS_CDRA_TLM, HAB_ECLSS_ARS_CDRA_CO2BED_TLM, HAB_ECLSS_PCS_TLM, HAB_ECLSS_PCS_CNTLR_TLM, HAB_ECLSS_PCS_FLUID_TLM, HAB_ECLSS_WMS_TLM, HAB_ECLSS_WMS_PW_TLM, HAB_ECLSS_WMS_WW_TLM */

#ifndef _ECLSS_TYPES_H_
#define _ECLSS_TYPES_H_

#include "shared_types.h"
///* @file */


#ifdef __cplusplus
extern "C" {
#endif
/** Structure HAB_ECLSS_WMS_WW_TLM (18 bytes in size)  *
* trick sim generated wms ww child of WMS
*/
typedef struct
{
  float TANK_QTY;                               ///< [    0] (4 bytes)  Tank percent full (0-100)
  float TANK_MASS;                              ///< [    4] (4 bytes)  Tank water mass
  float VENT_FLOW_RATE;                         ///< [    8] (4 bytes)  Vent flow rate
  uint8_t VENT_POS;                             ///< [   12] (1 bytes)  Vent valve position (1 = open)
  float CONDENSE_FLOW_RATE;                     ///< [   13] (4 bytes)  Condensate flow rate
  uint8_t VENT_CMD_FEEDBACK;                    ///< [   17] (1 bytes)  Vent valve position command feedback
} HAB_ECLSS_WMS_WW_TLM;     ///<  Total size of 18 bytes

/** Structure HAB_ECLSS_WMS_PW_TLM (14 bytes in size)  *
* trick sim generated WMS PW child of WMS
*/
typedef struct
{
  float TANK_QTY;                               ///< [    0] (4 bytes)  Tank percent full (0-100)
  float TANK_MASS;                              ///< [    4] (4 bytes)  Tank water mass
  float DISPENSE_FLOW_RATE;                     ///< [    8] (4 bytes)  Dispense flow rate
  uint8_t DISPENSE_POS;                         ///< [   12] (1 bytes)  Dispense valve position (1 = open)
  uint8_t DISPENSE_CMD_FEEDBACK;                ///< [   13] (1 bytes)  Dispense valve position command feedback
} HAB_ECLSS_WMS_PW_TLM;     ///<  Total size of 14 bytes

/** Structure HAB_ECLSS_PCS_FLUID_TLM (26 bytes in size)  *
* trick sim generated PCS fluid tlm child to PCS
*/
typedef struct
{
  float FLOW_RATE;                              ///< [    0] (4 bytes)  Mass flow rate
  float REG_VALVE_POS;                          ///< [    4] (4 bytes)  Pressure regulator valve position (1 = full open, 0 = closed)
  float REG_P;                                  ///< [    8] (4 bytes)  Pressure regulator regulated pressure
  float EXIT_T;                                 ///< [   12] (4 bytes)  Temperature to cabin
  uint8_t SOL_HIGH_POS;                         ///< [   16] (1 bytes)  High-flow solenoid valve position
  uint8_t SOL_LOW_POS;                          ///< [   17] (1 bytes)  Low-flow solenoid valve position
  float TANK_P;                                 ///< [   18] (4 bytes)  Tank pressure
  float TANK_QTY;                               ///< [   22] (4 bytes)  Tank quantity fraction of full (0-1)
} HAB_ECLSS_PCS_FLUID_TLM;     ///<  Total size of 26 bytes

/** Structure HAB_ECLSS_PCS_CNTLR_TLM (12 bytes in size)  *
* Trick Sim generated PCS controller child to PCS
*/
typedef struct
{
  int32_t STATE;                                ///< [    0] (4 bytes)  Controller state
  float O2_SETPOINT_FEEDBACK;                   ///< [    4] (4 bytes)  Percent O2 setpoint command feedback
  float P_SETPOINT_FEEDBACK;                    ///< [    8] (4 bytes)  Pressure setpoint command feedback
} HAB_ECLSS_PCS_CNTLR_TLM;     ///<  Total size of 12 bytes

/** Structure HAB_ECLSS_ARS_CDRA_CO2BED_TLM (22 bytes in size)  *
* Generated by Trick sim, child structure of ECLSS ARS CDRA
*/
typedef struct
{
  float HTR_1_T;                                ///< [    0] (4 bytes)  heater 1 temperature
  float HTR_2_T;                                ///< [    4] (4 bytes)  heater 2 temperature
  float AIR_EXIT_T;                             ///< [    8] (4 bytes)  air exit temperature
  float H2O_EXIT_T;                             ///< [   12] (4 bytes)  coolant exit temperature
  float PRESSURE;                               ///< [   16] (4 bytes)  pressure
  uint8_t HTR_1_PWR;                            ///< [   20] (1 bytes)  heater 1 powered (true)
  uint8_t HTR_2_PWR;                            ///< [   21] (1 bytes)  heater 2 powered (true)
} HAB_ECLSS_ARS_CDRA_CO2BED_TLM;     ///<  Total size of 22 bytes

/** Structure HAB_ECLSS_ARS_CDRA_TLM (110 bytes in size)  *
* generated from Trick sim, child structure of ECLSS ARS
*/
typedef struct
{
  float AIR_INLET_T;                            ///< [    0] (4 bytes)  air inlet temperature
  float AIR_EXIT_T;                             ///< [    4] (4 bytes)  air exit temperature
  float AIR_EXIT_PPCO2;                         ///< [    8] (4 bytes)  air exit partial pressure of CO2
  float DES_ASV_POS;                            ///< [   12] (4 bytes)  (0-1) desiccant beds air select valve position
  float CO2_ASV_POS;                            ///< [   16] (4 bytes)  (0-1) CO2 beds air select valve position
  float CO2_VENT_POS;                           ///< [   20] (4 bytes)  (0-1) CO2 vent valve position
  float ARS_FAN_AIR_INLET_T;                    ///< [   24] (4 bytes)  ARS fan air inlet temperature
  float ARS_FAN_T;                              ///< [   28] (4 bytes)  ARS fan motor temperature
  float ARS_FAN_N;                              ///< [   32] (4 bytes)  ARS fan motor speed
  float ARS_FAN_I;                              ///< [   36] (4 bytes)  ARS fan motor current
  float ARS_FAN_DP;                             ///< [   40] (4 bytes)  ARS fan delta-pressure
  HAB_ECLSS_ARS_CDRA_CO2BED_TLM CO2_BED_A;      ///< [   44] (22 bytes)  CO2 sorbant bed A
  HAB_ECLSS_ARS_CDRA_CO2BED_TLM CO2_BED_B;      ///< [   66] (22 bytes)  CO2 sorbant bed B
  float AIR_SAVE_PUMP_T;                        ///< [   88] (4 bytes)  air save pump motor temperature
  float AIR_SAVE_PUMP_N;                        ///< [   92] (4 bytes)  air save pump motor speed
  float AIR_SAVE_PUMP_I;                        ///< [   96] (4 bytes)  air save pump motor current
  float DES_INLET_T;                            ///< [  100] (4 bytes)  desiccant beds air inlet temperature
  uint8_t POWER_ON;                             ///< [  104] (1 bytes)  Controller power is on (true)
  uint32_t ACTIVE_SEGMENT;                      ///< [  105] (4 bytes)  Controller active cycle segment
  uint8_t OPERATE_CMD_FEEDBACK;                 ///< [  109] (1 bytes)  Operate (start/stop) command feedback
} HAB_ECLSS_ARS_CDRA_TLM;     ///<  Total size of 110 bytes

/** Structure HAB_ECLSS_ARS_TCCS_TLM (31 bytes in size)  *
* generated from Trick sim, child structure of ECLSS ARS
*/
typedef struct
{
  float BLOWER_T;                               ///< [    0] (4 bytes)  Blower motor temperature
  float BLOWER_N;                               ///< [    4] (4 bytes)  Blower motor speed
  float EXIT_T_1;                               ///< [    8] (4 bytes)  HTCO reactor air exit temperature 1
  float EXIT_T_2;                               ///< [   12] (4 bytes)  HTCO reactor air exit temperature 2
  float FLOW_METER;                             ///< [   16] (4 bytes)  Air flow rate
  uint8_t HEATER_ON;                            ///< [   20] (1 bytes)  HTCO reactor heater is on (true)
  float HTCO_T_1;                               ///< [   21] (4 bytes)  HTCO reactor temperature 1
  float HTCO_T_2;                               ///< [   25] (4 bytes)  HTCO reactor temperature 2
  uint8_t POWER_ON;                             ///< [   29] (1 bytes)  Controller power is on (true)
  uint8_t OPERATE_CMD_FEEDBACK;                 ///< [   30] (1 bytes)  Operate (start/stop) command feedback
} HAB_ECLSS_ARS_TCCS_TLM;     ///<  Total size of 31 bytes

/** Structure HAB_ECLSS_ARS_CPM_TLM (17 bytes in size)  *
* generated from Trick sim, child structure of ECLSS ARS
*/
typedef struct
{
  float PERCENT_O2;                             ///< [    0] (4 bytes)  percentage of O2 in air by volume
  float PPM_HCN;                                ///< [    4] (4 bytes)  parts per million of HCN
  float PPM_HCL;                                ///< [    8] (4 bytes)  parts per million of HCL
  float PPM_CO;                                 ///< [   12] (4 bytes)  parts per million of CO
  uint8_t SMOKE_DETECTED;                       ///< [   16] (1 bytes)  smoke detected flag (true)
} HAB_ECLSS_ARS_CPM_TLM;     ///<  Total size of 17 bytes

/** Structure HAB_ECLSS_ARS_SAM_TLM (36 bytes in size)  *
* generated from Trick sim, child structure of ECLSS ARS
*/
typedef struct
{
  float PRESSURE;                               ///< [    0] (4 bytes)  pressure
  float TEMPERATURE;                            ///< [    4] (4 bytes)  temperature
  float PP_N2;                                  ///< [    8] (4 bytes)  partial pressure of N2
  float PP_O2;                                  ///< [   12] (4 bytes)  partial pressure of O2
  float PP_CO2;                                 ///< [   16] (4 bytes)  partial pressure of CO2
  float HUMIDITY;                               ///< [   20] (4 bytes)  (0-100) percent relative humidity
  float DEWPOINT;                               ///< [   24] (4 bytes)  dewpoint temperature
  float PPM_CH4;                                ///< [   28] (4 bytes)  parts per million of CH4
  float PPM_H2;                                 ///< [   32] (4 bytes)  parts per million of H2
} HAB_ECLSS_ARS_SAM_TLM;     ///<  Total size of 36 bytes

/** Structure ECLSS_PPA_tlm_payload_t (261 bytes in size)  **/
typedef struct
{
  float GCA08_Hydrogen;                         ///< [    0] (4 bytes)  
  float GCA09_Oxygen;                           ///< [    4] (4 bytes)  
  float GCA10_Nitrogen;                         ///< [    8] (4 bytes)  
  float GCA11_Carbon_Monoxide;                  ///< [   12] (4 bytes)  
  float GCA12_Methane;                          ///< [   16] (4 bytes)  
  float GCC13_CO2;                              ///< [   20] (4 bytes)  
  float GCC14_Methane;                          ///< [   24] (4 bytes)  
  float GCC15_Ethylene;                         ///< [   28] (4 bytes)  
  float GCC16_Acetylene;                        ///< [   32] (4 bytes)  
  uint8_t PPASVC132;                            ///< [   36] (1 bytes)  
  uint8_t PPASVC133;                            ///< [   37] (1 bytes)  
  uint8_t PPASVC134;                            ///< [   38] (1 bytes)  
  uint8_t SABSV_220;                            ///< [   39] (1 bytes)  
  uint8_t SABSV_221;                            ///< [   40] (1 bytes)  
  float PPA_CH4_CO2_cmd;                        ///< [   41] (4 bytes)  
  float PPA_H2_main_cmd;                        ///< [   45] (4 bytes)  
  float PPA_H2_viewport_cmd;                    ///< [   49] (4 bytes)  
  float PPA_FC104;                              ///< [   53] (4 bytes)  
  float PPA_FC105;                              ///< [   57] (4 bytes)  
  float PPA_FC106;                              ///< [   61] (4 bytes)  
  float PPA_FT104;                              ///< [   65] (4 bytes)  
  float PPA_FT105;                              ///< [   69] (4 bytes)  
  float PPA_FT106;                              ///< [   73] (4 bytes)  
  float PPA_reactor_P_cmd;                      ///< [   77] (4 bytes)  
  float PPA_PT110;                              ///< [   81] (4 bytes)  
  float PPA_P115;                               ///< [   85] (4 bytes)  
  float PPA_P116;                               ///< [   89] (4 bytes)  
  uint8_t PPA_CO2_regen_cmd;                    ///< [   93] (1 bytes)  
  uint8_t PPAuWstart;                           ///< [   94] (1 bytes)  
  float PPA_CO2_plasma_uW_cmd;                  ///< [   95] (4 bytes)  
  float PPA_MeP_uW_cmd;                         ///< [   99] (4 bytes)  
  float PPA_Input_Power;                        ///< [  103] (4 bytes)  
  float PPA_Refl_Power;                         ///< [  107] (4 bytes)  
  uint32_t PPAstub1posn;                        ///< [  111] (4 bytes)  
  uint32_t PPAstub2posn;                        ///< [  115] (4 bytes)  
  uint32_t PPAstub3posn;                        ///< [  119] (4 bytes)  
  uint8_t PPAuWabort;                           ///< [  123] (1 bytes)  
  float PPA_T120;                               ///< [  124] (4 bytes)  
  float PPA_T121;                               ///< [  128] (4 bytes)  
  float PPA_T122;                               ///< [  132] (4 bytes)  
  float PPA_T123;                               ///< [  136] (4 bytes)  
  float PPA_T124;                               ///< [  140] (4 bytes)  
  float PPA_T125;                               ///< [  144] (4 bytes)  
  float PPA_T126;                               ///< [  148] (4 bytes)  
  uint8_t PPA_LEL_Alarm_State;                  ///< [  152] (1 bytes)  
  uint8_t PPA_Over_Pressure_Temp_State;         ///< [  153] (1 bytes)  
  uint8_t CRA_SVC007;                           ///< [  154] (1 bytes)  
  uint8_t CRA_SVC102;                           ///< [  155] (1 bytes)  
  uint8_t CRA_SVO203;                           ///< [  156] (1 bytes)  
  float CRA_P002;                               ///< [  157] (4 bytes)  
  float CRA_P106;                               ///< [  161] (4 bytes)  
  float CRA_P206;                               ///< [  165] (4 bytes)  
  float CRA_MFC005_command;                     ///< [  169] (4 bytes)  
  float CRA_MFC005_flow;                        ///< [  173] (4 bytes)  
  float CRA_MFC103_command;                     ///< [  177] (4 bytes)  
  float CRA_MFC103_flow;                        ///< [  181] (4 bytes)  
  float CRA_Molar_Ratio;                        ///< [  185] (4 bytes)  
  float CRA_P006_1;                             ///< [  189] (4 bytes)  
  float CRA_P006_2;                             ///< [  193] (4 bytes)  
  uint8_t CRA_H402_1;                           ///< [  197] (1 bytes)  
  uint8_t CRA_H402_2;                           ///< [  198] (1 bytes)  
  uint8_t CRA_FAN503;                           ///< [  199] (1 bytes)  
  float CRA_T403_1;                             ///< [  200] (4 bytes)  
  float CRA_T403_2;                             ///< [  204] (4 bytes)  
  float CRA_T404_1;                             ///< [  208] (4 bytes)  
  float CRA_T404_2;                             ///< [  212] (4 bytes)  
  float CRA_P601;                               ///< [  216] (4 bytes)  
  float CRA_DP405;                              ///< [  220] (4 bytes)  
  uint8_t CRA_FAN502;                           ///< [  224] (1 bytes)  
  float CRA_T407_1;                             ///< [  225] (4 bytes)  
  float CRA_T407_2;                             ///< [  229] (4 bytes)  
  float CRA_DP409;                              ///< [  233] (4 bytes)  
  uint8_t CRA_PUMP301;                          ///< [  237] (1 bytes)  
  uint8_t CRA_SVO608;                           ///< [  238] (1 bytes)  
  uint8_t CRA_SVO604;                           ///< [  239] (1 bytes)  
  uint8_t CRA_SVO610;                           ///< [  240] (1 bytes)  
  float CRA_CG411;                              ///< [  241] (4 bytes)  
  float CRA_CG412;                              ///< [  245] (4 bytes)  
  float FT013;                                  ///< [  249] (4 bytes)  
  float PS704ampPV;                             ///< [  253] (4 bytes)  
  float PS704voltPV;                            ///< [  257] (4 bytes)  
} ECLSS_PPA_tlm_payload_t;     ///<  Total size of 261 bytes

/** Structure ECLSS_PPA_tlm_packet_t (277 bytes in size)  *
* PPA telemetry message (replayed data from "DS Replay" app)
*/
typedef struct
{
  CCSDS_TLM_HDR cfsHeader;                      ///< [    0] (16 bytes)  Extended CFS SB message Header #CCSDS_TLM_HDR
  ECLSS_PPA_tlm_payload_t payload;              ///< [   16] (261 bytes)  
} ECLSS_PPA_tlm_packet_t;     ///<  Total size of 277 bytes

/** Structure HAB_ECLSS_ARS_TLM (291 bytes in size)  *
* Generated from Trick sim
*/
typedef struct
{
  CCSDS_TLM_HDR cfsHeader;                      ///< [    0] (16 bytes)  Extended CFS SB message Header #CCSDS_TLM_HDR
  HAB_ECLSS_ARS_SAM_TLM SAM;                    ///< [   16] (36 bytes)  Spacecraft Atmosphere Monitor
  HAB_ECLSS_ARS_CPM_TLM CPM;                    ///< [   52] (17 bytes)  Combustion Products Monitor
  HAB_ECLSS_ARS_TCCS_TLM TCCS;                  ///< [   69] (31 bytes)  Trace Contaminants Control System
  HAB_ECLSS_ARS_CDRA_TLM CDRA;                  ///< [  100] (110 bytes)  Carbon Dioxide Reduction Assembly
  float CAB_FAN_DP;                             ///< [  210] (4 bytes)  cabin fan delta-pressure
  float CAB_FAN_T;                              ///< [  214] (4 bytes)  cabin fan motor temperature
  float CAB_FAN_N;                              ///< [  218] (4 bytes)  cabin fan motor speed
  float CAB_FAN_I;                              ///< [  222] (4 bytes)  cabin fan motor current
  float H2O_SEP_N;                              ///< [  226] (4 bytes)  CHX H2O separator motor speed
  float H2O_SEP_P;                              ///< [  230] (4 bytes)  CHX H2O separator liquid pressure
  uint8_t H2O_SEP_LIQ;                          ///< [  234] (1 bytes)  CHX H2O separator liquid overflow (true)
  float INLET_T;                                ///< [  235] (4 bytes)  Air inlet temperature
  float CHX_AIR_INLET_T;                        ///< [  239] (4 bytes)  CHX air inlet temperature
  float CHX_AIR_EXIT_T;                         ///< [  243] (4 bytes)  CHX air exit temperature
  uint8_t CHX_AIR_EXIT_LIQ;                     ///< [  247] (1 bytes)  CHX air exit liquid detected (true)
  float CHX_H2O_INLET_T;                        ///< [  248] (4 bytes)  CHX coolant inlet temperature
  float CHX_H2O_EXIT_T;                         ///< [  252] (4 bytes)  CHX coolant exit temperature
  float CHX_TCV_POS;                            ///< [  256] (4 bytes)  CHX temperature control valve position
  float TCCV_POS;                               ///< [  260] (4 bytes)  temperature control check valve position
  uint8_t PORT_IMV_POS;                         ///< [  264] (1 bytes)  Port IMV valve open (true)
  uint8_t STBD_IMV_POS;                         ///< [  265] (1 bytes)  Starboard IMV valve open (true)
  float STBD_IMV_FAN_N;                         ///< [  266] (4 bytes)  Starboard IMV fan speed
  uint8_t AFT_IMV_POS;                          ///< [  270] (1 bytes)  Aft IMV valve open (true)
  uint8_t FWD_IMV_POS;                          ///< [  271] (1 bytes)  Forward IMV valve open (true)
  uint8_t CAB_FAN_ENA_CMD_FEEDBACK;             ///< [  272] (1 bytes)  Cabin fan run enable command feedback
  float CAB_FAN_SPEED_CMD_FEEDBACK;             ///< [  273] (4 bytes)  Cabin fan run speed command feedback
  uint8_t H2O_SEP_ENA_CMD_FEEDBACK;             ///< [  277] (1 bytes)  H2O separator run enable command feedback
  float H2O_SEP_SPEED_CMD_FEEDBACK;             ///< [  278] (4 bytes)  H2O separator run speed command feedback
  float CAB_T_SETPOINT_CMD_FEEDBACK;            ///< [  282] (4 bytes)  Cabin temperature setpoint command feedback
  uint8_t PORT_IMV_POS_CMD_FEEDBACK;            ///< [  286] (1 bytes)  Port IMV valve open command feedback
  uint8_t STBD_IMV_POS_CMD_FEEDBACK;            ///< [  287] (1 bytes)  Starboard IMV valve command feedback
  uint8_t STBD_IMV_FAN_ENA_CMD_FEEDBACK;        ///< [  288] (1 bytes)  Starboard IMV fan enable command feedback
  uint8_t AFT_IMV_POS_CMD_FEEDBACK;             ///< [  289] (1 bytes)  Aft IMV valve open command feedback
  uint8_t FWD_IMV_POS_CMD_FEEDBACK;             ///< [  290] (1 bytes)  Forward IMV valve open command feedback
} HAB_ECLSS_ARS_TLM;     ///<  Total size of 291 bytes

/** Structure HAB_ECLSS_PCS_TLM (85 bytes in size)  *
* Trick sim generated ECLSS PCS telemetry
*/
typedef struct
{
  CCSDS_TLM_HDR cfsHeader;                      ///< [    0] (16 bytes)  Extended CFS SB message Header #CCSDS_TLM_HDR
  HAB_ECLSS_PCS_CNTLR_TLM CONTROLLER;           ///< [   16] (12 bytes)  Controller
  HAB_ECLSS_PCS_FLUID_TLM N2;                   ///< [   28] (26 bytes)  N2 fluid subsystem
  HAB_ECLSS_PCS_FLUID_TLM O2;                   ///< [   54] (26 bytes)  O2 fluid subsystem
  float VENT_FLOW_RATE;                         ///< [   80] (4 bytes)  Vent valve mass flow rate
  uint8_t VENT_POS;                             ///< [   84] (1 bytes)  Vent valve position
} HAB_ECLSS_PCS_TLM;     ///<  Total size of 85 bytes

/** Structure HAB_ECLSS_WMS_TLM (48 bytes in size)  *
* trick sim generated ECLSS WMS telemetry
*/
typedef struct
{
  CCSDS_TLM_HDR cfsHeader;                      ///< [    0] (16 bytes)  Extended CFS SB message Header #CCSDS_TLM_HDR
  HAB_ECLSS_WMS_PW_TLM POTABLE_WATER;           ///< [   16] (14 bytes)  Potable water
  HAB_ECLSS_WMS_WW_TLM WASTE_WATER;             ///< [   30] (18 bytes)  Waste water
} HAB_ECLSS_WMS_TLM;     ///<  Total size of 48 bytes

void byteswap_HAB_ECLSS_WMS_TLM(HAB_ECLSS_WMS_TLM *inPtr, HAB_ECLSS_WMS_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_WMS_TLM(HAB_ECLSS_WMS_TLM *inPtr, HAB_ECLSS_WMS_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_PCS_TLM(HAB_ECLSS_PCS_TLM *inPtr, HAB_ECLSS_PCS_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_PCS_TLM(HAB_ECLSS_PCS_TLM *inPtr, HAB_ECLSS_PCS_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_ARS_TLM(HAB_ECLSS_ARS_TLM *inPtr, HAB_ECLSS_ARS_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_ARS_TLM(HAB_ECLSS_ARS_TLM *inPtr, HAB_ECLSS_ARS_TLM *outPtr, int direction);
void byteswap_ECLSS_PPA_tlm_packet_t(ECLSS_PPA_tlm_packet_t *inPtr, ECLSS_PPA_tlm_packet_t *outPtr, int direction);
void bitswap_ECLSS_PPA_tlm_packet_t(ECLSS_PPA_tlm_packet_t *inPtr, ECLSS_PPA_tlm_packet_t *outPtr, int direction);
void byteswap_ECLSS_PPA_tlm_payload_t(ECLSS_PPA_tlm_payload_t *inPtr, ECLSS_PPA_tlm_payload_t *outPtr, int direction);
void bitswap_ECLSS_PPA_tlm_payload_t(ECLSS_PPA_tlm_payload_t *inPtr, ECLSS_PPA_tlm_payload_t *outPtr, int direction);
void byteswap_HAB_ECLSS_ARS_SAM_TLM(HAB_ECLSS_ARS_SAM_TLM *inPtr, HAB_ECLSS_ARS_SAM_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_ARS_SAM_TLM(HAB_ECLSS_ARS_SAM_TLM *inPtr, HAB_ECLSS_ARS_SAM_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_ARS_CPM_TLM(HAB_ECLSS_ARS_CPM_TLM *inPtr, HAB_ECLSS_ARS_CPM_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_ARS_CPM_TLM(HAB_ECLSS_ARS_CPM_TLM *inPtr, HAB_ECLSS_ARS_CPM_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_ARS_TCCS_TLM(HAB_ECLSS_ARS_TCCS_TLM *inPtr, HAB_ECLSS_ARS_TCCS_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_ARS_TCCS_TLM(HAB_ECLSS_ARS_TCCS_TLM *inPtr, HAB_ECLSS_ARS_TCCS_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_ARS_CDRA_TLM(HAB_ECLSS_ARS_CDRA_TLM *inPtr, HAB_ECLSS_ARS_CDRA_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_ARS_CDRA_TLM(HAB_ECLSS_ARS_CDRA_TLM *inPtr, HAB_ECLSS_ARS_CDRA_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_ARS_CDRA_CO2BED_TLM(HAB_ECLSS_ARS_CDRA_CO2BED_TLM *inPtr, HAB_ECLSS_ARS_CDRA_CO2BED_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_ARS_CDRA_CO2BED_TLM(HAB_ECLSS_ARS_CDRA_CO2BED_TLM *inPtr, HAB_ECLSS_ARS_CDRA_CO2BED_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_PCS_CNTLR_TLM(HAB_ECLSS_PCS_CNTLR_TLM *inPtr, HAB_ECLSS_PCS_CNTLR_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_PCS_CNTLR_TLM(HAB_ECLSS_PCS_CNTLR_TLM *inPtr, HAB_ECLSS_PCS_CNTLR_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_PCS_FLUID_TLM(HAB_ECLSS_PCS_FLUID_TLM *inPtr, HAB_ECLSS_PCS_FLUID_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_PCS_FLUID_TLM(HAB_ECLSS_PCS_FLUID_TLM *inPtr, HAB_ECLSS_PCS_FLUID_TLM *outPtr, int direction);
void byteswap_CCSDS_TLM_HDR(CCSDS_TLM_HDR *inPtr, CCSDS_TLM_HDR *outPtr, int direction);
void bitswap_CCSDS_TLM_HDR(CCSDS_TLM_HDR *inPtr, CCSDS_TLM_HDR *outPtr, int direction);
void byteswap_CCSDS_Primary(CCSDS_Primary *inPtr, CCSDS_Primary *outPtr, int direction);
void bitswap_CCSDS_Primary(CCSDS_Primary *inPtr, CCSDS_Primary *outPtr, int direction);
void byteswap_HAB_ECLSS_WMS_PW_TLM(HAB_ECLSS_WMS_PW_TLM *inPtr, HAB_ECLSS_WMS_PW_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_WMS_PW_TLM(HAB_ECLSS_WMS_PW_TLM *inPtr, HAB_ECLSS_WMS_PW_TLM *outPtr, int direction);
void byteswap_HAB_ECLSS_WMS_WW_TLM(HAB_ECLSS_WMS_WW_TLM *inPtr, HAB_ECLSS_WMS_WW_TLM *outPtr, int direction);
void bitswap_HAB_ECLSS_WMS_WW_TLM(HAB_ECLSS_WMS_WW_TLM *inPtr, HAB_ECLSS_WMS_WW_TLM *outPtr, int direction);


/******************************************************************************
** Command Enumerations
*******************************************************************************/
#define ARS_CAB_FAN    0x0
#define ARS_CAB_T      0x1
#define ARS_CDRA_OPER  0x2
#define ARS_H2O_SEP    0x3
#define ARS_TCCS_OPER  0x4
#define PORT_IMV       0x5
#define STBD_IMV       0x6
#define STBD_IMV_FAN   0x7
#define AFT_IMV        0x8
#define FWD_IMV        0x9
#define DEPRESS        0x0
#define O2_SET         0x1
#define P_SET          0x2
#define REPRESS        0x3
#define PW_DISP        0x0
#define WW_VENT        0x1

/******************************************************************************
** Command Structure definitions
*******************************************************************************/

/**  ARS_CAB_FAN : ARS cabin fan command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_ENABLE;      ///<  Fan run enable (1 = ENABLE, 0 = DISABLE)
 float PARAM_2_SPEED;      ///<  Fan run speed (rpm)
}ARS_CAB_FAN_t;

/**  ARS_CAB_T : ARS cabin temperature setpoint**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 float PARAM_1_SETPOINT;      ///<  Cabin temperature setpoint
}ARS_CAB_T_t;

/**  ARS_CDRA_OPER : ARS CDRA start/stop command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_OPERATE;      ///<  CDRA start/stop command (1 = START, 0 = STOP)
}ARS_CDRA_OPER_t;

/**  ARS_H2O_SEP : ARS CHX H2O separator command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_ENABLE;      ///<  Separator run enable (1 = ENABLE, 0 = DISABLE)
 float PARAM_2_SPEED;      ///<  Separator run speed (rpm)
}ARS_H2O_SEP_t;

/**  ARS_TCCS_OPER : ARS TCCS start/stop command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_OPERATE;      ///<  TCCS start/stop command (1 = START, 0 = STOP)
}ARS_TCCS_OPER_t;

/**  PORT_IMV : Port IMV position command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_POSITION;      ///<  Valve position command (1 = OPEN 0 = CLOSE)
}PORT_IMV_t;

/**  STBD_IMV : Starboard IMV position command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_POSITION;      ///<  Valve position command (1 = OPEN 0 = CLOSE)
}STBD_IMV_t;

/**  STBD_IMV_FAN : Starboard IMV fan enable command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_ENABLE;      ///<  Fan enable command (1 = ENABLE 0 = DISABLE)
}STBD_IMV_FAN_t;

/**  AFT_IMV : Aft IMV position command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_POSITION;      ///<  Valve position command (1 = OPEN 0 = CLOSE)
}AFT_IMV_t;

/**  FWD_IMV : Forward IMV position command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_POSITION;      ///<  Valve position command (1 = OPEN 0 = CLOSE)
}FWD_IMV_t;

/**  DEPRESS : Start depress command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_START;      ///<  Start depress command (1 = start)
}DEPRESS_t;

/**  O2_SET : Percent O2 setpoint command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 float PARAM_1_SETPOINT;      ///<  Percent O2 setpoint command
}O2_SET_t;

/**  P_SET : Pressure setpoint command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 float PARAM_1_SETPOINT;      ///<  Pressure setpoint command
}P_SET_t;

/**  REPRESS : Start repress command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_START;      ///<  Start repress command (1 = start)
}REPRESS_t;

/**  PW_DISP : Potable dispense valve position command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_POSITION;      ///<  Valve position command (1 = open, 0 = close)
}PW_DISP_t;

/**  WW_VENT : Waste vent valve position command**/
typedef struct
{
 CCSDS_Primary   CmdHeader;  /**< \brief CCSDS Primary Header #CCSDS_PriHdr_t */
 uint16_t  CCSDS_CmdSecHdr;  /**< \brief CCSDS Command Secondary Header #CCSDS_CmdSecHdr_t */
 uint8_t PARAM_1_POSITION;      ///<  Valve position command (1 = open, 0 = close)
}WW_VENT_t;

#ifdef __cplusplus
}
#endif
#endif /// #ifndef _ECLSS_TYPES_H_
